# -*- coding: utf-8 -*-
"""
Created on Wed Mar 20 11:35:10 2019

@author: xumin
"""

import numpy as np
import matplotlib.pyplot as plt
import math
mass = np.array([[8.,2.,3.,5.,9.]]).T

A = np.array([[8.,3.,7.,1.,0.],
              [3.,7.,5.,0.,1.],
              [7.,5.,9.,3.,1.],
              [1.,0.,3.,5.,3.],
              [0.,1.,1.,3.,10.]])


B = np.array([[1.        , 0.375     , 0.875     , 0.125     , 0.        ],
              [1.5       , 3.5       , 2.5       , 0.        , 0.5       ],
              [2.33333333, 1.66666667, 3.        , 1.        , 0.33333333],
              [0.2       , 0.        , 0.6       , 1.        , 0.6       ],
              [0.        , 0.11111111, 0.11111111, 0.33333333, 1.11111111]])

for i in range(5):
    A[i,:] = A[i,:]/mass[i,0]
    
C = np.linalg.eig(B)


C = np.array([5.87834992, 0.08736624, 0.51557488, 1.82479928, 1.3050208 ]),
 array([[-0.17133417, -0.48455917, -0.48524999, -0.14311543, -0.31705952],
        [-0.76323046, -0.31221779,  0.27675709,  0.7770363 ,  0.48908725],
        [-0.6156407 ,  0.69835112,  0.05077257, -0.405661  , -0.3678064 ],
        [-0.08744813, -0.41400395,  0.69485901, -0.43581397,  0.33370504],
        [-0.03825218,  0.09289191, -0.45003451, -0.14573228,  0.64313787]])
    
q = np.array([[0.1,0.05,0.01,-0.3,0.3]]).T

normalized_q = q / np.sqrt(np.sum(q**2))